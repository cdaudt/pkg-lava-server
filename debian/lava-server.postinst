#!/bin/sh
# postinst script for lava-server
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Source debconf library.
. /usr/share/debconf/confmodule

LAVA_SYS_MOUNTDIR="/var/lib/lava-server/default"

master_config() {
    db_get lava-server/instance-name
    LAVA_INSTANCE=$RET
    db_get lava-server/db-server
    LAVA_DB_SERVER=$RET

    if [ "$LAVA_DB_NAME" = '$LAVA_DB_NAME' ]
    then
      LAVA_DB_NAME="lavaserver"
    fi
    if [ "$LAVA_DB_USER" = '$LAVA_DB_USER' ]
    then
      LAVA_DB_USER="lavaserver"
    fi
    if [ "$LAVA_DB_PORT" = '$LAVA_DB_PORT' ]
    then
      LAVA_DB_PORT=5432
    fi
    if [ "$LAVA_DB_SERVER" = '$LAVA_DB_SERVER' ]
    then
      LAVA_DB_SERVER="localhost"
    fi
    if [ "$LAVA_DB_PASSWORD" = '$LAVA_DB_PASSWORD' ]
    then
      LAVA_DB_PASSWORD=`env LANG=C LC_ALL=C tr -dc "[:alnum:]" < /dev/urandom | dd bs=1 count=12 2>/dev/null`
    fi
    LAVA_SYS_USER="lavaserver"
    LAVA_SYS_HOME=/var/lib/lava-server/home/
    if [ "$LAVA_DB_PORT" = '' ]
    then
      LAVA_DB_PORT=5432
    fi
    if [ "$LAVA_DB_SERVER" = '' ]
    then
      LAVA_DB_SERVER="localhost"
    fi
    if [ "$LAVA_PREFIX" = '' ]
    then
      LAVA_PREFIX="/var/lib/lava-server/"
    fi
    write_config() {
        # reduce the content of this conf file once l-d-t is replaced.
        cat <<INSTANCE_CONF
# Config version
LAVA_CONFIG_VERSION="$LAVA_CONFIG_VERSION"
# Installation prefix
LAVA_PREFIX="$LAVA_PREFIX"
# Instance name
LAVA_INSTANCE="$LAVA_INSTANCE"
# The lava-server branch used by upgrade
LAVA_MANIFEST_BRANCH="$LAVA_MANIFEST_BRANCH"
LAVA_BUILDOUT_CFG="$LAVA_BUILDOUT_CFG"
# System configuration (Unix-level)
LAVA_SYS_USER="$LAVA_SYS_USER"
LAVA_INSTANCE_OWNS_USER="$LAVA_INSTANCE_OWNS_USER"
# Apache configuration
LAVA_APACHE_VHOST="$LAVA_APACHE_VHOST"
LAVA_DEV_MODE="$LAVA_DEV_MODE"
# PostgreSQL configuration
LAVA_DB_NAME="$LAVA_DB_NAME"
LAVA_DB_USER="$LAVA_DB_USER"
LAVA_DB_SERVER="$LAVA_DB_SERVER"
LAVA_DB_PORT="$LAVA_DB_PORT"
LAVA_DB_PASSWORD="$LAVA_DB_PASSWORD"
# Scheduler configuration
LAVA_SCHEDULER_ENABLED="$LAVA_SCHEDULER_ENABLED"
LAVA_SERVER_IP="$LAVA_SERVER_IP"
LAVA_PROXY="$LAVA_PROXY"
INSTANCE_CONF
    }

    write_config >/etc/lava-server/instance.conf
    rm -f /etc/lava-server/worker.conf
    # lava-mount-masterfs support
    touch $LAVA_SYS_MOUNTDIR/media/.mounted
}

worker_config() {
    db_get lava-worker/master-instance-name
    LAVA_INSTANCE=$RET
    db_get lava-worker/db-server
    LAVA_DB_SERVER=$RET
    db_get lava-worker/db-name
    LAVA_DB_NAME=$RET
    db_get lava-worker/db-user
    LAVA_DB_USER=$RET
    db_get lava-worker/db-port
    LAVA_DB_PORT=$RET
    db_get lava-worker/db-pass
    LAVA_DB_PASSWORD=$RET

    LAVA_SYS_USER="lavaserver"
    LAVA_SYS_HOME=/var/lib/lava-server/home/

    # LAVA_SERVER_IP is where this worker will allow boards to
    # download modified images, served by apache
    # this is likely unnecessary as lava-dispatcher does the same thing
    # but needs an upstream fix.
    iface=$(ip route | awk '{ if ($1 == "default") { print($5); exit; } }')
    LAVA_SERVER_IP=$(ip addr show "$iface" | awk '{ if ($1 == "inet") { gsub("/.*", "", $2); print($2) } }')

    if [ "$LAVA_DB_PORT" = '' ]
    then
      LAVA_DB_PORT=5432
    fi
    write_config() {
    cat <<INSTANCE_CONF
# Config version
LAVA_CONFIG_VERSION="$LAVA_CONFIG_VERSION"
# Installation prefix
LAVA_PREFIX="$LAVA_PREFIX"
# Instance name
LAVA_INSTANCE="$LAVA_INSTANCE"
# The lava-server branch used by upgrade
LAVA_MANIFEST_BRANCH="$LAVA_MANIFEST_BRANCH"
LAVA_BUILDOUT_CFG="$LAVA_BUILDOUT_CFG"
# System configuration (Unix-level)
LAVA_SYS_USER="$LAVA_SYS_USER"
LAVA_INSTANCE_OWNS_USER="$LAVA_INSTANCE_OWNS_USER"
# Apache configuration
LAVA_APACHE_VHOST="$LAVA_APACHE_VHOST"
LAVA_DEV_MODE="$LAVA_DEV_MODE"
# PostgreSQL configuration
LAVA_DB_NAME="$LAVA_DB_NAME"
LAVA_DB_USER="$LAVA_DB_USER"
LAVA_DB_SERVER="$LAVA_DB_SERVER"
LAVA_DB_PORT="$LAVA_DB_PORT"
LAVA_DB_PASSWORD="$LAVA_DB_PASSWORD"
# Scheduler configuration
LAVA_SCHEDULER_ENABLED="$LAVA_SCHEDULER_ENABLED"
LAVA_SERVER_IP="$LAVA_SERVER_IP"
LAVA_PROXY="$LAVA_PROXY"
INSTANCE_CONF
    }

    write_config >/etc/lava-server/instance.conf
    if [ ! -f /etc/lava-server/worker.conf ]; then
        echo "# Created by LAVA server postinst script" > /etc/lava-server/worker.conf
    fi
    HEARTBEAT=`grep HEARTBEAT_TIMEOUT /etc/lava-server/worker.conf || true`
    if [ -z "$HEARTBEAT" ]; then
        echo "# comment out this line if not needed." >> /etc/lava-server/worker.conf
        echo "HEARTBEAT_TIMEOUT='300'" >> /etc/lava-server/worker.conf
    fi
}

die() {
    echo "$1"
    exit 1
}

install_database()
{
    # check postgres is not just installed but actually ready.
    pg=1
    limit=3
    while [ $pg -le $limit ]; do
        if ! pg_isready -d '$LAVA_DB_NAME' -p $LAVA_DB_PORT -q; then
            echo "[$pg] Postgres not ready for connection to $LAVA_DB_NAME on port $LAVA_DB_PORT."
            sleep 1
        else
            break
        fi
        pg=$(( $pg + 1 ))
    done
    if [ $pg -ge $limit ]; then
        echo "Failed to connect to postgres."
        exit $pg
    fi
    # Create database user, if it doesn't exist
    if ! su postgres -c "psql \"-c SELECT usename FROM pg_user WHERE usename='$LAVA_DB_USER'\"" | grep "$LAVA_DB_USER"; then
        su postgres -c "createuser --no-createdb --encrypted --login --no-superuser --no-createrole --no-password --port $LAVA_DB_PORT $LAVA_DB_USER"|| "Failed to create database user"
        # Set a password for our new user
        su postgres -c "psql --port $LAVA_DB_PORT --quiet --command=\"ALTER USER \"$LAVA_DB_USER\" WITH PASSWORD '$LAVA_DB_PASSWORD'\"" || die "Failed to set database password"
    fi
    # Create a database for our new user, if it doesn't exist
    if ! su postgres -c "psql -c \"SELECT datname FROM pg_database WHERE datname='$LAVA_DB_NAME'\"" | grep "$LAVA_DB_NAME"; then
        su postgres -c "createdb --port $LAVA_DB_PORT --locale=C.UTF-8 --encoding=UTF-8 --owner=$LAVA_DB_USER --template=template0 --no-password $LAVA_DB_NAME" || die "Failed to create a database"
    fi
    # Create devel user, if it doesn't exist, for unit test support
    if ! su postgres -c "psql \"-c SELECT usename FROM pg_user WHERE usename='devel'\"" | grep "devel"; then
        su postgres -c "createuser --createdb --login --no-superuser --no-createrole --no-password --port $LAVA_DB_PORT devel"|| "Failed to create test case user"
        # Set a password for the devel user
        su postgres -c "psql --port $LAVA_DB_PORT --quiet --command=\"ALTER USER \"devel\" WITH PASSWORD 'devel'\"" || die "Failed to set test case password"
    fi
    # create the devel database, if it doesn't exist
    if ! su postgres -c "psql -c \"SELECT datname FROM pg_database WHERE datname='devel'\"" | grep "devel"; then
        su postgres -c "createdb devel --owner devel"
    fi
    # syncdb
    # fake-initial only in django 1.8 but needed for upgrades from 1.7 using 1.9
    if [ "`dpkg --compare-versions $(django-admin --version) gt '1.8' && echo $?`" = '0' ]; then
        lava-server manage migrate --noinput --fake-initial
    else
        lava-server manage migrate --noinput
    fi
    lava-server manage refresh_queries --all
    # superuser - password must be changed
    if ! su postgres -c "psql \"-c SELECT usename FROM pg_user WHERE usename='$LAVA_SYS_USER'\"" | grep "$LAVA_SYS_USER"; then
        if ! su postgres -c "psql $LAVA_DB_NAME \"-c SELECT username FROM auth_user WHERE username='$LAVA_SYS_USER'\"" | grep "$LAVA_SYS_USER"; then
            lava-server manage createsuperuser --noinput --username=$LAVA_SYS_USER --email=$LAVA_SYS_USER@lava.invalid || true
        fi
    fi
}


case "$1" in
    configure)
        if [ -f /etc/lava-server/instance.conf ]; then
            . /etc/lava-server/instance.conf
        else
            . /usr/share/lava-server/instance.template
        fi
        if [ -z "$LAVA_SYS_USER" ]; then
            LAVA_SYS_USER="lavaserver"
        fi
        db_get lava-server/master
        if [ "$RET" = "false" ]; then
            worker_config
            adduser --quiet --system --group --home $LAVA_SYS_HOME $LAVA_SYS_USER --shell /bin/sh
            chown $LAVA_SYS_USER:$LAVA_SYS_USER $LAVA_SYS_MOUNTDIR
            RET=`mountpoint $LAVA_SYS_MOUNTDIR/media > /dev/null ; echo $?` || true
            if [ ! $RET ]; then
                chown $LAVA_SYS_USER:$LAVA_SYS_USER $LAVA_SYS_MOUNTDIR/media
            fi
        else
            master_config
            # directories within the SSHFS mount, only on master
            mkdir -p $LAVA_SYS_MOUNTDIR/media/lava-logs/
            mkdir -p $LAVA_SYS_MOUNTDIR/media/job-output/
            mkdir -p $LAVA_SYS_MOUNTDIR/media/attachments/
            mkdir -p $LAVA_SYS_MOUNTDIR/media/bundles/
            adduser --quiet --system --group --home $LAVA_SYS_HOME $LAVA_SYS_USER --shell /bin/sh
            find $LAVA_SYS_MOUNTDIR -maxdepth 2 -type d -exec chown $LAVA_SYS_USER:$LAVA_SYS_USER {} \;
        fi
        # user may not have been removed but the directory has, after purge.
        if [ ! -d $LAVA_SYS_HOME ]; then
            mkdir $LAVA_SYS_HOME
            chown $LAVA_SYS_USER:$LAVA_SYS_USER $LAVA_SYS_HOME
        fi
        # Allow lavaserver to write to all the log files
        chmod u+rXs /var/log/lava-server/
        # Allow users in the adm group to read the scheduler logs
        touch /var/log/lava-server/lava-scheduler.log
        chgrp adm /var/log/lava-server/lava-scheduler.log
        chmod g+rXs /var/log/lava-server/
        # Allow lava user to write the secret key
        touch /etc/lava-server/secret_key.conf
        chown $LAVA_SYS_USER:$LAVA_SYS_USER /etc/lava-server/secret_key.conf
        # setup SSHFS - master has empty dir, worker has key
        SSHDIR="$LAVA_SYS_HOME/.ssh"
        if [ ! -d $SSHDIR ]; then
            sudo -u $LAVA_SYS_USER mkdir $SSHDIR
        fi
        if [ -f /etc/lava-server/worker.conf ]; then
            if [ ! -f $SSHDIR/id_rsa ]; then
                # ssh-keygen -q might be a problem here, prevents it prompting for
                # more randomness, but that is what openssh-server uses.
                sudo -u $LAVA_SYS_USER ssh-keygen -C "ssh key used by LAVA for sshfs" -f $SSHDIR/id_rsa -t rsa -N ""
            fi
        else
            # install database only on the master
            install_database
            # Allow lavaserver to write to all the log files
            touch /var/log/lava-server/django.log
            chown $LAVA_SYS_USER:adm /var/log/lava-server/django.log
        fi

        # allow reinstalls when the user has not been removed.
        if [ ! -d $LAVA_SYS_HOME/ ]; then
            mkdir -p $LAVA_SYS_HOME/
        else
            chown $LAVA_SYS_USER:$LAVA_SYS_USER $LAVA_SYS_HOME/
        fi
        if [ -f /etc/apache2/sites-enabled/lava-server.conf ]; then
            apache2ctl restart
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
